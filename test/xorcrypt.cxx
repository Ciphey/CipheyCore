#include "gtest/gtest.h"

#include <ciphey/swig.hpp>
#include "common.hpp"

// Taken from cryptopals
static std::vector<uint8_t> ctext = {
  0x0a, 0x1d, 0x54, 0x0e, 0x02, 0x1a, 0x54, 0x0d, 0x0b, 0x0c, 0x54, 0x1d,
  0x0c, 0x1f, 0x11, 0x0b, 0x43, 0x1b, 0x1b, 0x18, 0x07, 0x49, 0x00, 0x11,
  0x02, 0x1d, 0x54, 0x15, 0x02, 0x10, 0x58, 0x59, 0x0c, 0x07, 0x54, 0x18,
  0x43, 0x0f, 0x06, 0x10, 0x07, 0x08, 0x0d, 0x59, 0x0d, 0x00, 0x13, 0x11,
  0x17, 0x49, 0x18, 0x18, 0x17, 0x0c, 0x54, 0x10, 0x0d, 0x49, 0x1a, 0x16,
  0x15, 0x0c, 0x19, 0x1b, 0x06, 0x1b, 0x58, 0x59, 0x01, 0x0c, 0x12, 0x16,
  0x11, 0x0c, 0x54, 0x0d, 0x0b, 0x0c, 0x54, 0x1f, 0x0a, 0x1b, 0x07, 0x0d,
  0x43, 0x06, 0x12, 0x59, 0x17, 0x01, 0x11, 0x59, 0x13, 0x0c, 0x06, 0x0a,
  0x0c, 0x07, 0x07, 0x59, 0x14, 0x00, 0x00, 0x11, 0x43, 0x1e, 0x1c, 0x16,
  0x0e, 0x49, 0x00, 0x11, 0x0a, 0x1a, 0x54, 0x11, 0x0a, 0x1a, 0x00, 0x16,
  0x11, 0x10, 0x54, 0x11, 0x02, 0x1a, 0x54, 0x1b, 0x16, 0x1a, 0x1d, 0x17,
  0x06, 0x1a, 0x07, 0x57
};
static std::vector<uint8_t> ptext {
  0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
  0x6f, 0x76, 0x65, 0x72, 0x20, 0x72, 0x6f, 0x61, 0x64, 0x20, 0x74, 0x68,
  0x61, 0x74, 0x20, 0x6c, 0x61, 0x79, 0x2c, 0x20, 0x6f, 0x6e, 0x20, 0x61,
  0x20, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x20, 0x6e, 0x69, 0x67, 0x68,
  0x74, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x6f,
  0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2c, 0x20, 0x62, 0x65, 0x66, 0x6f,
  0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74,
  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73,
  0x6f, 0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x77, 0x68, 0x6f,
  0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f,
  0x72, 0x79, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e,
  0x65, 0x73, 0x73, 0x2e
};
static std::array<uint8_t, 4> key =  {'c', 'i', 't', 'y'};

TEST(cipheyCore, xorcryptLen) {
  auto x = ciphey::xorcrypt_guess_len(ctext);

  EXPECT_EQ(x, key.size());
}

TEST(cipheyCore, xorcrypt) {
  for (size_t i = 1; i < 16; ++i) {
    if (i == key.size())
      continue;
    auto analysis = ciphey::analyse_bytes(ctext, i);
    auto res = ciphey::xorcrypt_crack(analysis, ciphey::test::expected());
    if (res.size() != 0)
      std::cerr << "Incorrect key size " << i << " has " << res.size() << " results" << std::endl;
  }

  auto analysis = ciphey::analyse_bytes(ctext, key.size());

  auto res = ciphey::xorcrypt_crack(analysis, ciphey::test::expected());

  for (size_t i = 0; i < res.size(); ++i) {
    if (std::equal(key.begin(), key.end(), res[i].key.begin())) {
      std::cerr << "True key had p-value of " << res[i].p_value << " and was position " << i << std::endl;
      goto found;
    }
  }
  EXPECT_TRUE(false) << "Key was not found";
  found:

  auto ptext_res = ciphey::xorcrypt_decrypt(ctext, key);
  EXPECT_TRUE(std::equal(ptext_res.begin(), ptext_res.end(), ptext.begin()));

  ptext_res = ciphey::xorcrypt_encrypt(ptext_res, key);
  EXPECT_TRUE(std::equal(ptext_res.begin(), ptext_res.end(), ctext.begin()));

//  EXPECT_EQ(analysis, 29);
}

